import mongoose,{Schema} from "mongoose";

const categoriaSchema = new mongoose.Schema({
  nome: {
    type: String,
    required: [true, 'Nome da categoria é obrigatório']},
  livros: [{type: mongoose.Schema.Types.ObjectId, ref: "Livro"}],
  createdAt: {type: Date,default: Date.now},
});

const Categoria = mongoose.model("Categoria", categoriaSchema);


const livroSchema = new mongoose.Schema({
  titulo: {
    type: String,
    required: [true, 'Título é obrigatório'],
    trim: true,
    minlength: [1, 'Título deve ter pelo menos 1 caractere'],
    maxlength: [200, 'Título deve ter no máximo 200 caracteres']
  },
  imagem_uri:{type: String, required: true},
  autores: {
    type: String,
    required: [true, 'Autor é obrigatório'],
    trim: true,
    maxlength: [100, 'Nome do autor deve ter no máximo 100 caracteres']
  },
  descricao: {
    type: String,
    required: [true, 'Descrição é obrigatória'],
    trim: true,
    minlength: [10, 'Descrição deve ter pelo menos 10 caracteres'],
    maxlength: [2000, 'Descrição deve ter no máximo 2000 caracteres']
  },
  categoria: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Categoria',
    required: true
  }],
  publiData: {
    type: Date,
    required: [true, 'Data de publicação é obrigatória']
  },
  editora: {
    type: String,
    trim: true,
    maxlength: [100, 'Nome da editora deve ter no máximo 100 caracteres']
  },
  lingua: {
    type: String,
    required: [true, 'Idioma é obrigatório'],
    default: 'pt-br'
  },
  pag: {
    type: Number,
    min: [1, 'Número de páginas deve ser positivo']
  },});
  
  const Livro = mongoose.model("Livro", livroSchema);



const UserSchema = new Schema({
    name: {
    type: String,
    required: [true, 'Nome é obrigatório'],
    trim: true,
    minlength: [2, 'Nome deve ter pelo menos 2 caracteres'],
    maxlength: [50, 'Nome deve ter no máximo 50 caracteres']
  },
  email: {
    type: String,
    required: [true, 'Email é obrigatório'],
    unique: true,
    lowercase: true,
    trim: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Email inválido']
  },
  password: {
    type: String,
    required: [true, 'Senha é obrigatória'],
    minlength: [6, 'Senha deve ter pelo menos 6 caracteres']
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user'
  },
  avatar: {
    type: String,
    default: null
  },
  createdAt: {
    type: Date,
    default: Date.now
    },
  isActive: {
    type: Boolean,
    default: true
  }
});

const User = mongoose.model("User",UserSchema);
